module S3

  def self.config
    @config ||= YAML.load_file("s3.yml")[S3::Application.environment]
  end

  class Application < Sinatra::Base

    enable :static
    set :public, File.join(File.dirname(__FILE__), '..', 'public')
    set :environment, :production

    register Sinatra::Async

    helpers do
      include S3::Helpers
    end

    include S3::Test

    configure do
      ActiveRecord::Base.establish_connection(S3.config[:db]) 
    end

    before do
      @meta, @amz = {}, {}
      @env.each do |k,v|
	k = k.downcase.gsub('_', '-')
	@amz[$1] = v.strip if k =~ /^http-x-amz-([-\w]+)$/
	@meta[$1] = v if k =~ /^http-x-amz-meta-([-\w]+)$/
      end

      auth, key_s, secret_s = *env['HTTP_AUTHORIZATION'].to_s.match(/^AWS (\w+):(.+)$/)
      date_s = env['HTTP_X_AMZ_DATE'] || env['HTTP_DATE']
      if request.params.has_key?('Signature') and Time.at(request['Expires'].to_i) >= Time.now
	key_s, secret_s, date_s = request['AWSAccessKeyId'], request['Signature'], request['Expires']
      end
      uri = env['PATH_INFO']
      uri += "?" + env['QUERY_STRING'] if RESOURCE_TYPES.include?(env['QUERY_STRING'])
      canonical = [env['REQUEST_METHOD'], env['HTTP_CONTENT_MD5'], env['CONTENT_TYPE'],
	date_s, uri]
      @amz.sort.each do |k, v|
	canonical[-1,0] = "x-amz-#{k}:#{v}"
      end
      @user = User.find_by_key key_s
      if (@user and secret_s != hmac_sha1(@user.secret, canonical.map{|v|v.to_s.strip} * "\n")) || (@user and @user.deleted == 1)
	raise BadAuthentication
      end
    end

    aget '/' do
      only_authorized
      buckets = Bucket.user_buckets(@user.id)

      xml do |x|
	x.ListAllMyBucketsResult :xmlns => "http://s3.amazonaws.com/doc/2006-03-01/" do
	  x.Owner do
	    x.ID @user.key
	    x.DisplayName @user.login
	  end
	  x.Buckets do
	    buckets.each do |b|
	      x.Bucket do
		x.Name b.name
		x.CreationDate b.created_at.getgm.iso8601
	      end
	    end
	  end
	end
      end
    end

    error do
      error = Builder::XmlMarkup.new
      error.instruct! :xml, :version=>"1.0", :encoding=>"UTF-8"

      error.Error do
	error.Code request.env['sinatra.error'].status
	error.Message request.env['sinatra.error'].message
	error.Resource env['PATH_INFO']
	error.RequestId Time.now.to_i
      end

      status request.env['sinatra.error'].status.nil? ? 500 : request.env['sinatra.error'].status
      content_type 'text/xml'
      error.target!
    end

  end

end
